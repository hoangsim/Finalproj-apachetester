Keep your Apache updated with the latest releases and patches
Apache is maintained through a community of developers who are committed to keeping the software current and robust. 
New fixes and security patches are added in every release. So one best practice is to always upgrade to the latest 
stable version of Apache. This will ensure that you keep your services and applications running securely.


Disable Directory Listing
By default Apache lists all the content of its Document root directory in the absence of the index file.

If the base file like index.html or index.php is not available then anyone can see all files and sub-directories listed 
in the browser. This creates a security vulnerability because an attacker could analyze the source code for possible 
security flaws or to obtain more information about an application, such as database connection strings, passwords to 
other systems; therefore it’s best to disable the directory listing. To disable directory browsing, you just need to 
set the Options directive in the Apache httpd.conf file as follows:
To disable directory browsing, you can either set the value of Option directive to “None” or “-Indexes”
<Directory />                                     <Directory /> 
Options None                                      Options -Indexes
Order allow,deny              OR                  Order allow,deny
Allow from all                                    Allow from all
</Directory>                                      </Directory>


Block Directory Access
Here is another example of default settings that need to be changed. In this case, it’s the access granted to your 
directory’s files which allows anyone to explore wherever they’d like.
To put a total block in place, use the following command:

<Directory "/">
Require all denied
</Directory>

If you want to enable access to certain users, you can do so with this:

<Directory "/usr/users/*/public_html">
Require all granted
</Directory>

If you want to enable access to certain folders within the directory, you can do so with this:

<Directory "/usr/local/httpd">
Require all granted
</Directory>

Disable unnecessary modules
By default Apache comes with a number of pre-installed and enabled modules. However, this creates an additional security 
vulnerability. In order to reduce your chances of becoming a victim of a web attack it’s best to disable the modules that 
are not currently being used. Unnecessary modules can be disabled by going into the httpd.conf file and adding a # 
character in front of the LoadModule line.
 

Turn off unnecessary services
You can disable unnecessary services CGI execution, symbolic links, and server side includes by using the Options directive 
from the httpd.conf configuration file. The image below example shows what you need to include in your config file to 
disable CGI and includes: 
<Directory “/var/www/html/web1”>
Options -Includes -ExecCGI
</Directory>

Ensure that Apache server-info is disabled
If the <Location /server-info> directive in the httpd.conf configuration file is enabled it displays information about the 
Apache configuration when the /server-info page is accessed from http://www.example.com/server-info. This could potentially 
include sensitive information about server settings such as the server version, system paths, database names, library 
information, and so on. This information can be disabled by commenting out (adding #) the <Location /server-info> directive 
from the httpd.conf configuration file.
 

Disable Signature
The Off setting, which is the default, suppresses the footer line.
The On setting simply adds a line with the server version number and ServerName of the serving virtual host.
It’s good to disable Signature, as you may not wish to reveal Apache Version you are running.

ServerSignature Off
(will remove the version information from the page generated by Apache.)

Disable Banner
This directive controls whether the Server response header field, which is sent back to clients, includes a description of 
the generic OS-type of the server as well as information about compiled-in modules.

ServerTokens Prod
(will change Header to production only, i.e., Apache)

Disable Trace HTTP Request
The default TraceEnable on permits TRACE, which disallows any request body to accompany the request.
TraceEnable off causes the core server and mod_proxy to return a 405 (Method not allowed) error to the client.
TraceEnable on allows for Cross-Site Tracing Issue and potentially giving the option to a hacker to steal your cookie 
information.

‘TRACE’ is a HTTP request method used for debugging which echoes back the received request for a client so that he may see 
what changes or additions have been done. This functionality creates a security vulnerability because an attacker can exploit 
it and steal sensitive information via headers like cookies and website credentials. You can disable this simply by changing 
the 
directive in your httpd.conf file to TraceEnable off.

Distribute ownership and don’t run Apache as ‘root’ 
Running Apache server as root is security issue. The reason is straightforward; if an attacker can gain entry to a website 
then they will have full root (admin) access to the entire server. 
Running Apache in its own non-root account is good. Modify User & Group Directive in httpd.conf of your Apache Web Server

Example:
•	Create a user and group called apache

# groupadd apache
# useradd –G apache apache

•	Change apache installation directory ownership to a newly created non-privileged user

# chown –R apache:apache /opt/apache

•	 Go to $Web_Server/conf
•	 Modify httpd.conf using vi
•	 Search for User & Group Directive and change as non-privileged account apache

User apache 
Group apache


Restrict Access to a Specific Network or IP
If you wish your site to be viewed only by specific IP address or network, you can modify your site Directory in 
httpd.conf

Give the network address in the Allow directive.
<Directory /yourwebsite>    
Options None    
AllowOverride None    
Order deny,allow    
Deny from all    
Allow from 10.20.0.0/24  
</Directory>

Give the IP address in the Allow directive.
<Directory /yourwebsite>
Options None
AllowOverride None
Order deny,allow
Deny from all
Allow from 10.20.1.56
</Directory>

Use only TLS 1.2
SSL v2 & v3 has many security flaws, and if you are working towards penetration test or PCI compliance, then you are 
expected to close security finding to disable SSL v2/v3.
Any SSL v2/v3 communication may be vulnerable to a Man-in-The-Middle attack that could allow data tampering or 
disclosure.
Let’s implement apache web server to accept only latest TLS and reject SSL v2/v3 connection request.
•	Go to $Web_Server/conf/extra folder
•	Modify SSLProtocol directive in httpd-ssl.conf as below to accept only TLS 1.2+
	SSLProtocol –ALL +TLSv1.2


Disable Null and Weak Ciphers
Allow only strong ciphers, so you close all the doors who try to handshake on lower cipher suites.

SSLCipherSuite ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM


Etag
It allows remote attackers to obtain sensitive information like inode number, multipart MIME boundary, and child process 
through Etag header.
To prevent this vulnerability, let’s implement it as below. This is required to fix for PCI compliance.
•	Go to $Web_Server/conf directory
•	Add the following directive and save the httpd.conf
	FileETag None


Protect binary and configuration directory permission
By default, permission for binary and configuration is 755 that means any user on a server can view the configuration. 
You can disallow another user to get into conf and bin folder.
•	Go to $Web_Server directory
•	Change permission of bin and conf folder
	# chmod –R 750 bin conf


System Settings Protection
In a default installation, users can override apache configuration using .htaccess. If you want to stop users from changing 
your apache server settings, you can add AllowOverride to None as shown below.
This must be done at the root level.
•	Go to $Web_Server/conf directory
•	 Open httpd.conf using vi
•	 Search for Directory at a root level
<Directory /> 
Options -Indexes 
AllowOverride None
</Directory>


HTTP Request Methods
HTTP 1.1 protocol support many request methods which may not be required and some of them are having potential risk. Typically 
you may need GET, HEAD, POST request methods in a web application, which can be configured in the respective Directory directive. 
Default configuration support OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT method in HTTP 1.1 protocol.
•	 Go to $Web_Server/conf directory
•	 Open httpd.conf using vi
•	Search for Directory and add the following
<LimitExcept GET POST HEAD>
deny from all
</LimitExcept>


Set cookie with HttpOnly and Secure flag
You can mitigate most of the common Cross Site Scripting attack using HttpOnly and Secure flag in a cookie. Without having HttpOnly 
and Secure, it is possible to steal or manipulate web application session and cookies, and it’s dangerous.
•	 Ensure mod_headers.so is enabled in your httpd.conf
•	 Go to $Web_Server/conf directory
•	 Add the following directive and save the httpd.conf
	Header edit Set-Cookie ^(.*)$ $1;HttpOnly;Secure


Clickjacking Attack
Clickjacking is a well-known web application vulnerabilities.
•	 Ensure mod_headers.so is enabled in your httpd.conf
•	 Go to $Web_Server/conf directory
•	 Add the following directive and save the httpd.conf
	Header always append X-Frame-Options SAMEORIGIN


Server Side Include
Server Side Include (SSI) has a risk of increasing the load on the server. If you have shared the environment and heavy traffic 
web applications you should consider disabling SSI by adding Includes in Options directive.
SSI attack allows the exploitation of a web application by injecting scripts in HTML pages or executing codes remotely.
•	Go to $Web_Server/conf directory
•	 Open httpd.conf using vi
•	 Search for Directory and add Includes in Options directive
<Directory /opt/apache/htdocs>
Options –Indexes -Includes
Order allow,denyAllow from all
</Directory>


X-XSS Protection
Cross Site Scripting (XSS) protection can be bypassed in many browsers. You could apply this protection for a web application if 
it was disabled by the user. This is used by a majority of giant web companies like Facebook, Twitter, Google, etc.
•	Go to $Web_Server/conf directory
•	Open httpd.conf using vi and add following Header directive
	Header set X-XSS-Protection "1; mode=block"


Disable HTTP 1.0 Protocol
When we talk about security, we should protect as much we can. So why do we use older HTTP version of the protocol, let’s disable 
them as well?
HTTP 1.0 has security weakness related to session hijacking. We can disable this by using the mod_rewrite module.
•	Ensure to load mod_rewrite module in httpd.conf file
•	 Enable RewriteEngine directive as following and add Rewrite condition to allow only HTTP 1.1
RewriteEngine On
RewriteCond %{THE_REQUEST} !HTTP/1.1$
RewriteRule .* - [F]


Timeout value configuration
By default, Apache time-out value is 300 seconds, which can be a victim of Slow Loris attack and DoS. To mitigate this, you can 
lower the timeout value to maybe 60 seconds.
•	Go to $Web_Server/conf directory
•	Open httpd.conf using vi
•	 Add the following in httpd.conf
	Timeout 60


*** once these changes are made in the file, apache will need to be restarted **
